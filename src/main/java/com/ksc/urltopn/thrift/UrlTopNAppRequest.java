/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ksc.urltopn.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.0)", date = "2023-08-20")
public class UrlTopNAppRequest implements org.apache.thrift.TBase<UrlTopNAppRequest, UrlTopNAppRequest._Fields>, java.io.Serializable, Cloneable, Comparable<UrlTopNAppRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UrlTopNAppRequest");

  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OUPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouputPath", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("topN", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_REDUCE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("numReduceTasks", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SPLIT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("splitSize", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UrlTopNAppRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UrlTopNAppRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String applicationId; // required
  public @org.apache.thrift.annotation.Nullable String inputPath; // required
  public @org.apache.thrift.annotation.Nullable String ouputPath; // required
  public int topN; // required
  public int numReduceTasks; // required
  public int splitSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_ID((short)1, "applicationId"),
    INPUT_PATH((short)2, "inputPath"),
    OUPUT_PATH((short)3, "ouputPath"),
    TOP_N((short)4, "topN"),
    NUM_REDUCE_TASKS((short)5, "numReduceTasks"),
    SPLIT_SIZE((short)6, "splitSize");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_ID
          return APPLICATION_ID;
        case 2: // INPUT_PATH
          return INPUT_PATH;
        case 3: // OUPUT_PATH
          return OUPUT_PATH;
        case 4: // TOP_N
          return TOP_N;
        case 5: // NUM_REDUCE_TASKS
          return NUM_REDUCE_TASKS;
        case 6: // SPLIT_SIZE
          return SPLIT_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOPN_ISSET_ID = 0;
  private static final int __NUMREDUCETASKS_ISSET_ID = 1;
  private static final int __SPLITSIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("ouputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOP_N, new org.apache.thrift.meta_data.FieldMetaData("topN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_REDUCE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("numReduceTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPLIT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("splitSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UrlTopNAppRequest.class, metaDataMap);
  }

  public UrlTopNAppRequest() {
  }

  public UrlTopNAppRequest(
    String applicationId,
    String inputPath,
    String ouputPath,
    int topN,
    int numReduceTasks,
    int splitSize)
  {
    this();
    this.applicationId = applicationId;
    this.inputPath = inputPath;
    this.ouputPath = ouputPath;
    this.topN = topN;
    setTopNIsSet(true);
    this.numReduceTasks = numReduceTasks;
    setNumReduceTasksIsSet(true);
    this.splitSize = splitSize;
    setSplitSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UrlTopNAppRequest(UrlTopNAppRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    if (other.isSetInputPath()) {
      this.inputPath = other.inputPath;
    }
    if (other.isSetOuputPath()) {
      this.ouputPath = other.ouputPath;
    }
    this.topN = other.topN;
    this.numReduceTasks = other.numReduceTasks;
    this.splitSize = other.splitSize;
  }

  @Override
  public UrlTopNAppRequest deepCopy() {
    return new UrlTopNAppRequest(this);
  }

  @Override
  public void clear() {
    this.applicationId = null;
    this.inputPath = null;
    this.ouputPath = null;
    setTopNIsSet(false);
    this.topN = 0;
    setNumReduceTasksIsSet(false);
    this.numReduceTasks = 0;
    setSplitSizeIsSet(false);
    this.splitSize = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getApplicationId() {
    return this.applicationId;
  }

  public UrlTopNAppRequest setApplicationId(@org.apache.thrift.annotation.Nullable String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getInputPath() {
    return this.inputPath;
  }

  public UrlTopNAppRequest setInputPath(@org.apache.thrift.annotation.Nullable String inputPath) {
    this.inputPath = inputPath;
    return this;
  }

  public void unsetInputPath() {
    this.inputPath = null;
  }

  /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
  public boolean isSetInputPath() {
    return this.inputPath != null;
  }

  public void setInputPathIsSet(boolean value) {
    if (!value) {
      this.inputPath = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getOuputPath() {
    return this.ouputPath;
  }

  public UrlTopNAppRequest setOuputPath(@org.apache.thrift.annotation.Nullable String ouputPath) {
    this.ouputPath = ouputPath;
    return this;
  }

  public void unsetOuputPath() {
    this.ouputPath = null;
  }

  /** Returns true if field ouputPath is set (has been assigned a value) and false otherwise */
  public boolean isSetOuputPath() {
    return this.ouputPath != null;
  }

  public void setOuputPathIsSet(boolean value) {
    if (!value) {
      this.ouputPath = null;
    }
  }

  public int getTopN() {
    return this.topN;
  }

  public UrlTopNAppRequest setTopN(int topN) {
    this.topN = topN;
    setTopNIsSet(true);
    return this;
  }

  public void unsetTopN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPN_ISSET_ID);
  }

  /** Returns true if field topN is set (has been assigned a value) and false otherwise */
  public boolean isSetTopN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPN_ISSET_ID);
  }

  public void setTopNIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPN_ISSET_ID, value);
  }

  public int getNumReduceTasks() {
    return this.numReduceTasks;
  }

  public UrlTopNAppRequest setNumReduceTasks(int numReduceTasks) {
    this.numReduceTasks = numReduceTasks;
    setNumReduceTasksIsSet(true);
    return this;
  }

  public void unsetNumReduceTasks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMREDUCETASKS_ISSET_ID);
  }

  /** Returns true if field numReduceTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetNumReduceTasks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMREDUCETASKS_ISSET_ID);
  }

  public void setNumReduceTasksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMREDUCETASKS_ISSET_ID, value);
  }

  public int getSplitSize() {
    return this.splitSize;
  }

  public UrlTopNAppRequest setSplitSize(int splitSize) {
    this.splitSize = splitSize;
    setSplitSizeIsSet(true);
    return this;
  }

  public void unsetSplitSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPLITSIZE_ISSET_ID);
  }

  /** Returns true if field splitSize is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPLITSIZE_ISSET_ID);
  }

  public void setSplitSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPLITSIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((String)value);
      }
      break;

    case INPUT_PATH:
      if (value == null) {
        unsetInputPath();
      } else {
        setInputPath((String)value);
      }
      break;

    case OUPUT_PATH:
      if (value == null) {
        unsetOuputPath();
      } else {
        setOuputPath((String)value);
      }
      break;

    case TOP_N:
      if (value == null) {
        unsetTopN();
      } else {
        setTopN((Integer)value);
      }
      break;

    case NUM_REDUCE_TASKS:
      if (value == null) {
        unsetNumReduceTasks();
      } else {
        setNumReduceTasks((Integer)value);
      }
      break;

    case SPLIT_SIZE:
      if (value == null) {
        unsetSplitSize();
      } else {
        setSplitSize((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_ID:
      return getApplicationId();

    case INPUT_PATH:
      return getInputPath();

    case OUPUT_PATH:
      return getOuputPath();

    case TOP_N:
      return getTopN();

    case NUM_REDUCE_TASKS:
      return getNumReduceTasks();

    case SPLIT_SIZE:
      return getSplitSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_ID:
      return isSetApplicationId();
    case INPUT_PATH:
      return isSetInputPath();
    case OUPUT_PATH:
      return isSetOuputPath();
    case TOP_N:
      return isSetTopN();
    case NUM_REDUCE_TASKS:
      return isSetNumReduceTasks();
    case SPLIT_SIZE:
      return isSetSplitSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof UrlTopNAppRequest)
      return this.equals((UrlTopNAppRequest)that);
    return false;
  }

  public boolean equals(UrlTopNAppRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_inputPath = true && this.isSetInputPath();
    boolean that_present_inputPath = true && that.isSetInputPath();
    if (this_present_inputPath || that_present_inputPath) {
      if (!(this_present_inputPath && that_present_inputPath))
        return false;
      if (!this.inputPath.equals(that.inputPath))
        return false;
    }

    boolean this_present_ouputPath = true && this.isSetOuputPath();
    boolean that_present_ouputPath = true && that.isSetOuputPath();
    if (this_present_ouputPath || that_present_ouputPath) {
      if (!(this_present_ouputPath && that_present_ouputPath))
        return false;
      if (!this.ouputPath.equals(that.ouputPath))
        return false;
    }

    boolean this_present_topN = true;
    boolean that_present_topN = true;
    if (this_present_topN || that_present_topN) {
      if (!(this_present_topN && that_present_topN))
        return false;
      if (this.topN != that.topN)
        return false;
    }

    boolean this_present_numReduceTasks = true;
    boolean that_present_numReduceTasks = true;
    if (this_present_numReduceTasks || that_present_numReduceTasks) {
      if (!(this_present_numReduceTasks && that_present_numReduceTasks))
        return false;
      if (this.numReduceTasks != that.numReduceTasks)
        return false;
    }

    boolean this_present_splitSize = true;
    boolean that_present_splitSize = true;
    if (this_present_splitSize || that_present_splitSize) {
      if (!(this_present_splitSize && that_present_splitSize))
        return false;
      if (this.splitSize != that.splitSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApplicationId()) ? 131071 : 524287);
    if (isSetApplicationId())
      hashCode = hashCode * 8191 + applicationId.hashCode();

    hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
    if (isSetInputPath())
      hashCode = hashCode * 8191 + inputPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetOuputPath()) ? 131071 : 524287);
    if (isSetOuputPath())
      hashCode = hashCode * 8191 + ouputPath.hashCode();

    hashCode = hashCode * 8191 + topN;

    hashCode = hashCode * 8191 + numReduceTasks;

    hashCode = hashCode * 8191 + splitSize;

    return hashCode;
  }

  @Override
  public int compareTo(UrlTopNAppRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetApplicationId(), other.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, other.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetInputPath(), other.isSetInputPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOuputPath(), other.isSetOuputPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOuputPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouputPath, other.ouputPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTopN(), other.isSetTopN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topN, other.topN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetNumReduceTasks(), other.isSetNumReduceTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumReduceTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReduceTasks, other.numReduceTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetSplitSize(), other.isSetSplitSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitSize, other.splitSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UrlTopNAppRequest(");
    boolean first = true;

    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inputPath:");
    if (this.inputPath == null) {
      sb.append("null");
    } else {
      sb.append(this.inputPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ouputPath:");
    if (this.ouputPath == null) {
      sb.append("null");
    } else {
      sb.append(this.ouputPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topN:");
    sb.append(this.topN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numReduceTasks:");
    sb.append(this.numReduceTasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("splitSize:");
    sb.append(this.splitSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UrlTopNAppRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UrlTopNAppRequestStandardScheme getScheme() {
      return new UrlTopNAppRequestStandardScheme();
    }
  }

  private static class UrlTopNAppRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<UrlTopNAppRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, UrlTopNAppRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationId = iprot.readString();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inputPath = iprot.readString();
              struct.setInputPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUPUT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ouputPath = iprot.readString();
              struct.setOuputPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOP_N
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topN = iprot.readI32();
              struct.setTopNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_REDUCE_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numReduceTasks = iprot.readI32();
              struct.setNumReduceTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPLIT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.splitSize = iprot.readI32();
              struct.setSplitSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, UrlTopNAppRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(struct.applicationId);
        oprot.writeFieldEnd();
      }
      if (struct.inputPath != null) {
        oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
        oprot.writeString(struct.inputPath);
        oprot.writeFieldEnd();
      }
      if (struct.ouputPath != null) {
        oprot.writeFieldBegin(OUPUT_PATH_FIELD_DESC);
        oprot.writeString(struct.ouputPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOP_N_FIELD_DESC);
      oprot.writeI32(struct.topN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_REDUCE_TASKS_FIELD_DESC);
      oprot.writeI32(struct.numReduceTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPLIT_SIZE_FIELD_DESC);
      oprot.writeI32(struct.splitSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UrlTopNAppRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UrlTopNAppRequestTupleScheme getScheme() {
      return new UrlTopNAppRequestTupleScheme();
    }
  }

  private static class UrlTopNAppRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<UrlTopNAppRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UrlTopNAppRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetApplicationId()) {
        optionals.set(0);
      }
      if (struct.isSetInputPath()) {
        optionals.set(1);
      }
      if (struct.isSetOuputPath()) {
        optionals.set(2);
      }
      if (struct.isSetTopN()) {
        optionals.set(3);
      }
      if (struct.isSetNumReduceTasks()) {
        optionals.set(4);
      }
      if (struct.isSetSplitSize()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetApplicationId()) {
        oprot.writeString(struct.applicationId);
      }
      if (struct.isSetInputPath()) {
        oprot.writeString(struct.inputPath);
      }
      if (struct.isSetOuputPath()) {
        oprot.writeString(struct.ouputPath);
      }
      if (struct.isSetTopN()) {
        oprot.writeI32(struct.topN);
      }
      if (struct.isSetNumReduceTasks()) {
        oprot.writeI32(struct.numReduceTasks);
      }
      if (struct.isSetSplitSize()) {
        oprot.writeI32(struct.splitSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UrlTopNAppRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.applicationId = iprot.readString();
        struct.setApplicationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inputPath = iprot.readString();
        struct.setInputPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ouputPath = iprot.readString();
        struct.setOuputPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topN = iprot.readI32();
        struct.setTopNIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numReduceTasks = iprot.readI32();
        struct.setNumReduceTasksIsSet(true);
      }
      if (incoming.get(5)) {
        struct.splitSize = iprot.readI32();
        struct.setSplitSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

